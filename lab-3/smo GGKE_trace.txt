**********************************************************************************************
*                              Модель СМО G/G/K/E                                            *
**********************************************************************************************
*                           И с х о д н ы е   д а н н ы е                                    *
**********************************************************************************************
serv    STORAGE 3; количество приборов
E_buf   EQU     3; емкость накопителя (буфера)                                          
*t_a     EQU     168; средний интервал между поступающими заявками                        
t_b     EQU     336; средняя длительность обслуживания заявки в приборе                     
RN_a    EQU     305; номер генератора для потока заявок
RN_b    EQU     423; номер генератора для длительности обслуживания                      
P_1     EQU     0.6; вероятность занятия первого прибора
P_2     EQU     0.25; вероятность занятия второго прибора
P_3     EQU     0.15; вероятность занятия третьего прибора
P_1_2_f EQU     0.705882; вероятность заняния первого прибора, если заняли третий
P_1_3_f EQU     0.8; вероятность заняния первого прибора, если заняли второй
P_2_3_f EQU     0.625; вероятность заняния второго прибора, если заняли первый
**********************************************************************************************
TU_sys  TABLE       M1,0.2,0.2,50;
TU_buf  QTABLE      buf1,0.1,0.1,50; 
Exp_f   VARIABLE    (Exponential(123,0,t_b))
**********************************************************************************************
        GENERATE	(GetRandomNumberFromFile("D:\Projects\itmo-modelling-queuing-theory-main\lab-3\trace.txt"))
        TEST L      Q$buf1,E_buf,term; отбросить заявку при переполнении очереди (buf1 > E_buf => term) !!!обязательно 1 пробел после TEST!!!
        QUEUE       buf1; отметить поступление в очередь
        ENTER       serv; попытка занять прибор
        GATE LR     serv_1,oc_1; занят ли сервер 1
        GATE LR     serv_2,oc_2; занят ли сервер 2, когда сервер 1 свободен
        GATE LR     serv_3,oc_3; занят ли сервер 3
        TRANSFER    P_1,,way_1
        TRANSFER    P_2_3_f,way_3,way_2

oc_3    TRANSFER    P_1_2_f,way_2,way_1; сервера 1 и 2 свободны

oc_2    GATE LR     serv_3,way_1; занят ли сервер 3, когда сервер 2 занят, а 1 свободен
        ; сервера 1 и 3 свободны
        TRANSFER    P_1_3_f,way_3,way_1
        
oc_1    GATE LR     serv_2,way_3; занят ли сервер 2
        GATE LR     serv_3,way_2; занят ли сервер 3
        ; сервера 2 и 3 свободны
        TRANSFER    P_2_3_f,way_3,way_2

way_1   LOGIC S     serv_1; заняли первый узел
        SEIZE       s_1; для сбора статистики
        DEPART      buf1; отметить выход из очереди
        ADVANCE     (Exponential(321,0,t_b)); время обработки в приборе 1
        RELEASE     s_1; для сбора статистики
        LOGIC R     serv_1
        LEAVE       serv; покидаем прибор
        TRANSFER    ,out; конец обработки заявки

way_2   LOGIC S     serv_2; заняли второй узел
        SEIZE       s_2; для сбора статистики
        DEPART      buf1; отметить выход из очереди
        ADVANCE     (Exponential(432,0,t_b)); время обработки в приборе 2
        RELEASE     s_2; для сбора статистики
        LOGIC R     serv_2
        LEAVE       serv; покидаем прибор
        TRANSFER    ,out; конец обработки заявки

way_3   LOGIC S     serv_3; заняли третий узел
        SEIZE       s_3; для сбора статистики
        DEPART      buf1; отметить выход из очереди
        ADVANCE     (Exponential(543,0,t_b)); время обработки в приборе 3
        RELEASE     s_3; для сбора статистики
        LOGIC R     serv_3
        LEAVE       serv; покидаем прибор
        TRANSFER    ,out; конец обработки заявки

out     TABULATE    TU_sys
        TERMINATE   1
term    TERMINATE   1
****************************************************************************
* Служебные переменные, необходимые для процедуры GetRandomNumberFromFile  *
****************************************************************************
ErrorCodes   MATRIX ,2,1  ; Коды ошибок открытия/закрытиия файла (при наличии ошибок в конце моделирования будут записаны ненулевые значения)  
FilePosition MATRIX ,1,1  ; Текущий номер строки в файле, из которой читается число (увеличивается на 1 с каждым чтением)
******************************************************************
PROCEDURE GetRandomNumberFromFile(FileName) BEGIN
    TEMPORARY OpenError, CloseError, LineFromFile, FileId;
    FileId = 1;
    OpenError = open(FileId,FileName);
    if (OpenError /= 0) then begin
        FileId = 2;
        OpenError = open(FileId,FileName);
        if (OpenError /=0) then begin
            ErrorCodes[1,1] = OpenError;
            return "";
        end;
    end;
    FilePosition[1,1] = FilePosition[1,1] + 1;
    seek(FileId,FilePosition[1,1]);
    LineFromFile = read(FileId);
    if (LineFromFile = "") then begin
        FilePosition[1,1] = 1;
        seek(FileId,FilePosition[1,1]);
        LineFromFile = read(FileId);
    end;
    CloseError = close(FileId);
    if (CloseError /=0) then begin
        ErrorCodes[2,1] = CloseError;
        return "";
    end;
    return value(LineFromFile);
END;
**********************************************************************************************
        START       10000